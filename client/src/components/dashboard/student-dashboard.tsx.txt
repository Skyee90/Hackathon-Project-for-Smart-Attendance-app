import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Medal3D } from "@/components/3d/medal";
import { AttendanceChart } from "@/components/charts/attendance-chart";
import { CalendarCheck, Flame, Star, Clock, Trophy, BookOpen, TrendingUp, ArrowUp } from "lucide-react";

export function StudentDashboard() {
  const { data, isLoading } = useQuery({
    queryKey: ['/api/dashboard/student']
  });

  if (isLoading) {
    return (
      <div className="space-y-6">
        {/* Loading skeleton */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {[...Array(4)].map((_, i) => (
            <Card key={i} className="animate-pulse">
              <CardContent className="p-6">
                <div className="h-4 bg-muted rounded mb-4"></div>
                <div className="h-8 bg-muted rounded"></div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  if (!data) {
    return (
      <div className="text-center py-12">
        <p className="text-muted-foreground">Failed to load dashboard data</p>
      </div>
    );
  }

  const { user, gamification, attendance, achievements } = data;

  return (
    <div className="space-y-6" data-testid="student-dashboard">
      {/* Attendance Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {/* Attendance Rate Card */}
        <Card className="relative overflow-hidden">
          <div className="shimmer-bg absolute inset-0 opacity-50"></div>
          <CardContent className="p-6 relative z-10">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-sm font-medium text-muted-foreground">Attendance Rate</h3>
              <CalendarCheck className="text-primary text-xl" />
            </div>
            <div className="space-y-2">
              <p className="text-3xl font-bold text-primary" data-testid="text-attendance-rate">
                {attendance.rate}%
              </p>
              <div className="flex items-center text-sm text-accent">
                <ArrowUp className="w-4 h-4 mr-1" />
                <span>Great progress!</span>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Current Streak Card */}
        <Card className="glow-green relative overflow-hidden">
          <CardContent className="p-6 relative z-10">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-sm font-medium text-muted-foreground">Current Streak</h3>
              <Flame className="text-orange-500 text-xl animate-pulse" />
            </div>
            <div className="space-y-2">
              <p className="text-3xl font-bold streak-flame" data-testid="text-streak">
                {attendance.streak} days
              </p>
              <p className="text-sm text-accent">ðŸ”¥ Keep it up!</p>
            </div>
          </CardContent>
        </Card>

        {/* XP Points Card */}
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-sm font-medium text-muted-foreground">Experience Points</h3>
              <Star className="text-accent text-xl" />
            </div>
            <div className="space-y-2">
              <p className="text-3xl font-bold text-accent" data-testid="text-xp">
                {gamification?.xp?.toLocaleString() || 0}
              </p>
              <Progress 
                value={((gamification?.xp || 0) % 1000) / 10} 
                className="h-2"
              />
              <p className="text-sm text-muted-foreground">
                {1000 - ((gamification?.xp || 0) % 1000)} XP to next level
              </p>
            </div>
          </CardContent>
        </Card>

        {/* Today's Status Card */}
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-sm font-medium text-muted-foreground">Today's Status</h3>
              <div className="w-3 h-3 bg-accent rounded-full animate-pulse"></div>
            </div>
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span className="text-sm">Check-in Status</span>
                <Badge variant="default" className="bg-accent text-accent-foreground">
                  Present
                </Badge>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* 3D Medal Display & Progress Chart Row */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* 3D Medal Showcase */}
        <Card>
          <CardHeader>
            <CardTitle>Latest Achievement</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex flex-col items-center space-y-4">
              <Medal3D 
                type="streak" 
                size={96} 
                className="glow-border"
                data-testid="medal-latest"
              />
              <div className="text-center">
                <h4 className="font-bold text-accent">Streak Master</h4>
                <p className="text-sm text-muted-foreground">10+ day attendance streak</p>
                <Badge className="mt-2 bg-accent/10 border border-accent/20 text-accent">
                  +500 XP
                </Badge>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Progress Chart */}
        <div className="lg:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle>Attendance Progress</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-64">
                <AttendanceChart data={attendance.recent || []} />
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Achievement Badges */}
      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle>Your Badges</CardTitle>
          <p className="text-primary hover:text-primary/80 text-sm font-medium cursor-pointer">
            View All
          </p>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-6 gap-4">
            {/* Earned Badges */}
            {achievements?.slice(0, 3).map((achievement: any, index: number) => (
              <div 
                key={achievement.id}
                className="flex flex-col items-center space-y-2 p-3 bg-muted/50 rounded-lg border border-border hover:border-accent/50 transition-all group"
                data-testid={`badge-earned-${index}`}
              >
                <div className="w-12 h-12 bg-gradient-to-br from-accent to-primary rounded-full flex items-center justify-center group-hover:scale-110 transition-transform">
                  <Trophy className="text-white" />
                </div>
                <span className="text-xs text-center font-medium">{achievement.achievement?.name}</span>
              </div>
            ))}

            {/* Locked Badges */}
            {[...Array(3)].map((_, index) => (
              <div 
                key={`locked-${index}`}
                className="flex flex-col items-center space-y-2 p-3 bg-muted/50 rounded-lg border border-border opacity-50"
                data-testid={`badge-locked-${index}`}
              >
                <div className="w-12 h-12 bg-muted rounded-full flex items-center justify-center">
                  <Clock className="text-muted-foreground" />
                </div>
                <span className="text-xs text-center text-muted-foreground">Locked</span>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Recent Activity & Leaderboard */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Recent Activity */}
        <Card>
          <CardHeader>
            <CardTitle>Recent Activity</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex items-center space-x-3 p-3 bg-muted/50 rounded-lg">
                <div className="w-8 h-8 bg-accent rounded-full flex items-center justify-center flex-shrink-0">
                  <CalendarCheck className="w-4 h-4 text-accent-foreground" />
                </div>
                <div className="flex-1">
                  <p className="text-sm font-medium">Attendance marked</p>
                  <p className="text-xs text-muted-foreground">Today, {new Date().toLocaleTimeString()}</p>
                </div>
                <span className="text-xs text-accent font-medium">+25 XP</span>
              </div>

              {achievements?.slice(0, 2).map((achievement: any, index: number) => (
                <div key={achievement.id} className="flex items-center space-x-3 p-3 bg-muted/50 rounded-lg">
                  <div className="w-8 h-8 bg-secondary rounded-full flex items-center justify-center flex-shrink-0">
                    <Trophy className="w-4 h-4 text-secondary-foreground" />
                  </div>
                  <div className="flex-1">
                    <p className="text-sm font-medium">Earned "{achievement.achievement?.name}" badge</p>
                    <p className="text-xs text-muted-foreground">
                      {new Date(achievement.unlockedAt).toLocaleDateString()}
                    </p>
                  </div>
                  <span className="text-xs text-secondary font-medium">
                    +{achievement.achievement?.xpReward} XP
                  </span>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Mini Leaderboard */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between">
            <CardTitle>Class Leaderboard</CardTitle>
            <p className="text-primary hover:text-primary/80 text-sm font-medium cursor-pointer">
              View Full
            </p>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <div className="flex items-center space-x-3 p-3 bg-gradient-to-r from-accent/10 to-transparent rounded-lg border border-accent/20">
                <div className="flex items-center justify-center w-8 h-8 bg-accent text-accent-foreground rounded-full font-bold text-sm">
                  1
                </div>
                <div className="flex-1">
                  <p className="font-medium text-accent">{user.name} (You)</p>
                  <p className="text-xs text-muted-foreground">{gamification?.xp || 0} XP</p>
                </div>
                <Trophy className="text-accent" />
              </div>

              {/* Mock leaderboard entries */}
              {[
                { name: "Sarah Wilson", xp: 2680, rank: 2 },
                { name: "Mike Johnson", xp: 2590, rank: 3 },
                { name: "Emma Davis", xp: 2510, rank: 4 },
                { name: "Alex Chen", xp: 2450, rank: 5 }
              ].map((entry, index) => (
                <div key={index} className="flex items-center space-x-3 p-3 bg-muted/30 rounded-lg">
                  <div className="flex items-center justify-center w-8 h-8 bg-muted text-muted-foreground rounded-full font-bold text-sm">
                    {entry.rank}
                  </div>
                  <div className="flex-1">
                    <p className="font-medium">{entry.name}</p>
                    <p className="text-xs text-muted-foreground">{entry.xp.toLocaleString()} XP</p>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
