import { useAuth } from "@/lib/auth";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { useIsMobile } from "@/hooks/use-mobile";
import { 
  GraduationCap, 
  BarChart3, 
  CalendarCheck, 
  Trophy, 
  Crown, 
  BookOpen, 
  User, 
  Presentation, 
  Users, 
  Settings,
  LogOut
} from "lucide-react";

interface SidebarProps {
  currentView: string;
  onViewChange: (view: string) => void;
  isOpen: boolean;
  onToggle: (open: boolean) => void;
}

export function Sidebar({ currentView, onViewChange, isOpen, onToggle }: SidebarProps) {
  const { user, logout } = useAuth();
  const isMobile = useIsMobile();

  const navigationItems = [
    { id: 'dashboard', label: 'Dashboard', icon: BarChart3, href: '#dashboard' },
    { id: 'attendance', label: 'Attendance', icon: CalendarCheck, href: '#attendance' },
    { id: 'achievements', label: 'Achievements', icon: Trophy, href: '#achievements' },
    { id: 'leaderboard', label: 'Leaderboard', icon: Crown, href: '#leaderboard' },
    { id: 'homework', label: 'Homework', icon: BookOpen, href: '#homework' },
  ];

  const roleOptions = [
    { value: 'student', label: 'Student View', icon: User },
    { value: 'teacher', label: 'Teacher View', icon: Presentation },
    { value: 'parent', label: 'Parent View', icon: Users },
  ];

  if (!user) return null;

  return (
    <>
      {/* Overlay for mobile */}
      {isMobile && isOpen && (
        <div 
          className="fixed inset-0 bg-background/80 backdrop-blur-sm z-40 lg:hidden"
          onClick={() => onToggle(false)}
          data-testid="sidebar-overlay"
        />
      )}

      {/* Sidebar */}
      <aside 
        className={cn(
          "fixed left-0 top-0 z-50 h-full w-64 bg-card border-r border-border transition-transform duration-300",
          isMobile ? (isOpen ? "translate-x-0" : "-translate-x-full") : "translate-x-0"
        )}
        data-testid="sidebar"
      >
        {/* Header */}
        <div className="p-6 border-b border-border">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-primary rounded-lg flex items-center justify-center">
              <GraduationCap className="text-primary-foreground text-xl" />
            </div>
            <div>
              <h1 className="font-display font-bold text-xl neon-text">EduGamify</h1>
              <p className="text-muted-foreground text-sm">Smart Learning</p>
            </div>
          </div>
        </div>

        {/* Navigation */}
        <nav className="mt-6 px-4">
          <ul className="space-y-2">
            {navigationItems.map((item) => {
              const Icon = item.icon;
              const isActive = item.id === 'dashboard'; // For now, dashboard is always active
              return (
                <li key={item.id}>
                  <Button
                    variant={isActive ? "secondary" : "ghost"}
                    className={cn(
                      "w-full justify-start space-x-3 px-4 py-3",
                      isActive && "glow-border bg-primary/10 border border-primary/20 text-primary"
                    )}
                    data-testid={`nav-${item.id}`}
                  >
                    <Icon className="w-4 h-4" />
                    <span>{item.label}</span>
                  </Button>
                </li>
              );
            })}
          </ul>

          {/* Role Switcher */}
          <div className="mt-8 p-4 bg-muted/50 rounded-lg border border-border">
            <p className="text-sm text-muted-foreground mb-3">Switch Role</p>
            <div className="space-y-2">
              {roleOptions.map((role) => {
                const Icon = role.icon;
                const isActive = currentView === role.value;
                const canAccess = user.role === role.value || user.role === 'teacher'; // Teachers can view all roles
                
                return (
                  <Button
                    key={role.value}
                    variant="ghost"
                    size="sm"
                    className={cn(
                      "w-full justify-start space-x-2 px-3 py-2 text-sm",
                      isActive && "bg-secondary/20 text-secondary border border-secondary/30",
                      !canAccess && "opacity-50 cursor-not-allowed"
                    )}
                    onClick={() => canAccess && onViewChange(role.value)}
                    disabled={!canAccess}
                    data-testid={`role-${role.value}`}
                  >
                    <Icon className="w-4 h-4" />
                    <span>{role.label}</span>
                  </Button>
                );
              })}
            </div>
          </div>
        </nav>

        {/* User Profile */}
        <div className="absolute bottom-0 left-0 right-0 p-4 border-t border-border">
          <div className="flex items-center space-x-3 mb-3">
            <div className="w-10 h-10 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center">
              <span className="text-sm font-bold text-primary-foreground">
                {user.name.split(' ').map(n => n[0]).join('')}
              </span>
            </div>
            <div className="flex-1 min-w-0">
              <p className="text-sm font-medium truncate" data-testid="user-name">
                {user.name}
              </p>
              <p className="text-xs text-muted-foreground" data-testid="user-id">
                {user.studentId ? `ID: ${user.studentId}` : user.role}
              </p>
            </div>
            <Button variant="ghost" size="sm" data-testid="button-settings">
              <Settings className="w-4 h-4" />
            </Button>
          </div>
          
          <Button 
            variant="outline" 
            size="sm" 
            className="w-full justify-start space-x-2"
            onClick={logout}
            data-testid="button-logout"
          >
            <LogOut className="w-4 h-4" />
            <span>Sign Out</span>
          </Button>
        </div>
      </aside>
    </>
  );
}
