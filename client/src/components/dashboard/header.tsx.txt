import { Button } from "@/components/ui/button";
import { useAuth } from "@/lib/auth";
import { useState } from "react";
import { QRScanner } from "@/components/qr/qr-scanner";
import { useQuery } from "@tanstack/react-query";
import { Menu, Bell, QrCode, Star } from "lucide-react";

interface HeaderProps {
  onSidebarToggle: () => void;
}

export function Header({ onSidebarToggle }: HeaderProps) {
  const { user } = useAuth();
  const [showQRScanner, setShowQRScanner] = useState(false);

  const { data: studentData } = useQuery({
    queryKey: ['/api/dashboard/student'],
    enabled: user?.role === 'student'
  });

  if (!user) return null;

  const getGreeting = () => {
    const hour = new Date().getHours();
    if (hour < 12) return "Good morning";
    if (hour < 17) return "Good afternoon";
    return "Good evening";
  };

  return (
    <>
      <header className="bg-card border-b border-border p-4 flex items-center justify-between sticky top-0 z-40">
        <div className="flex items-center space-x-4">
          <Button
            variant="ghost"
            size="sm"
            className="lg:hidden"
            onClick={onSidebarToggle}
            data-testid="button-menu"
          >
            <Menu className="text-xl" />
          </Button>
          
          <div>
            <h2 className="text-2xl font-display font-bold">Dashboard</h2>
            <p className="text-muted-foreground">
              {getGreeting()}, {user.name}! ðŸš€
            </p>
          </div>
        </div>

        <div className="flex items-center space-x-4">
          {/* XP Display for Students */}
          {user.role === 'student' && studentData?.gamification && (
            <div className="hidden sm:flex items-center space-x-2 px-4 py-2 bg-accent/10 border border-accent/20 rounded-lg">
              <Star className="text-accent w-4 h-4" />
              <span className="font-mono font-bold text-accent" data-testid="text-xp">
                {studentData.gamification.xp?.toLocaleString() || 0} XP
              </span>
            </div>
          )}
          
          {/* Notifications */}
          <Button variant="ghost" size="sm" className="relative" data-testid="button-notifications">
            <Bell className="text-xl" />
            <span className="absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full animate-pulse"></span>
          </Button>

          {/* QR Scanner */}
          <Button 
            className="glow-border hover:bg-primary/90"
            onClick={() => setShowQRScanner(true)}
            data-testid="button-qr-scanner"
          >
            <QrCode className="w-4 h-4 mr-2" />
            <span className="hidden sm:inline">Scan QR</span>
          </Button>
        </div>
      </header>

      {/* QR Scanner Modal */}
      {showQRScanner && (
        <QRScanner
          isOpen={showQRScanner}
          onClose={() => setShowQRScanner(false)}
        />
      )}
    </>
  );
}
